// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.21.9
// source: Solana.proto

package solana

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Transfer transaction
type Transfer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// destination address
	Recipient string `protobuf:"bytes,1,opt,name=recipient,proto3" json:"recipient,omitempty"`
	// amount
	Value uint64 `protobuf:"varint,2,opt,name=value,proto3" json:"value,omitempty"`
	// optional memo
	Memo string `protobuf:"bytes,3,opt,name=memo,proto3" json:"memo,omitempty"`
	// optional referenced public keys
	References []string `protobuf:"bytes,4,rep,name=references,proto3" json:"references,omitempty"`
}

func (x *Transfer) Reset() {
	*x = Transfer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Solana_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Transfer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Transfer) ProtoMessage() {}

func (x *Transfer) ProtoReflect() protoreflect.Message {
	mi := &file_Solana_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Transfer.ProtoReflect.Descriptor instead.
func (*Transfer) Descriptor() ([]byte, []int) {
	return file_Solana_proto_rawDescGZIP(), []int{0}
}

func (x *Transfer) GetRecipient() string {
	if x != nil {
		return x.Recipient
	}
	return ""
}

func (x *Transfer) GetValue() uint64 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *Transfer) GetMemo() string {
	if x != nil {
		return x.Memo
	}
	return ""
}

func (x *Transfer) GetReferences() []string {
	if x != nil {
		return x.References
	}
	return nil
}

// Create and initialize a stake account, and delegate amount to it.
// Recommendation behavior is to not specify a stake account, and a new unique account will be created each time.
// Optionally a stake account pubkey can be specified, but it should not exist on chain.
type DelegateStake struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Validator's public key
	ValidatorPubkey string `protobuf:"bytes,1,opt,name=validator_pubkey,json=validatorPubkey,proto3" json:"validator_pubkey,omitempty"`
	// delegation amount
	Value uint64 `protobuf:"varint,2,opt,name=value,proto3" json:"value,omitempty"`
	// staking account
	StakeAccount string `protobuf:"bytes,3,opt,name=stake_account,json=stakeAccount,proto3" json:"stake_account,omitempty"`
}

func (x *DelegateStake) Reset() {
	*x = DelegateStake{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Solana_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DelegateStake) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DelegateStake) ProtoMessage() {}

func (x *DelegateStake) ProtoReflect() protoreflect.Message {
	mi := &file_Solana_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DelegateStake.ProtoReflect.Descriptor instead.
func (*DelegateStake) Descriptor() ([]byte, []int) {
	return file_Solana_proto_rawDescGZIP(), []int{1}
}

func (x *DelegateStake) GetValidatorPubkey() string {
	if x != nil {
		return x.ValidatorPubkey
	}
	return ""
}

func (x *DelegateStake) GetValue() uint64 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *DelegateStake) GetStakeAccount() string {
	if x != nil {
		return x.StakeAccount
	}
	return ""
}

// Deactivate staking on stake account
type DeactivateStake struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// staking account
	StakeAccount string `protobuf:"bytes,1,opt,name=stake_account,json=stakeAccount,proto3" json:"stake_account,omitempty"`
}

func (x *DeactivateStake) Reset() {
	*x = DeactivateStake{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Solana_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeactivateStake) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeactivateStake) ProtoMessage() {}

func (x *DeactivateStake) ProtoReflect() protoreflect.Message {
	mi := &file_Solana_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeactivateStake.ProtoReflect.Descriptor instead.
func (*DeactivateStake) Descriptor() ([]byte, []int) {
	return file_Solana_proto_rawDescGZIP(), []int{2}
}

func (x *DeactivateStake) GetStakeAccount() string {
	if x != nil {
		return x.StakeAccount
	}
	return ""
}

// Deactivate staking on multiple stake account
type DeactivateAllStake struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// staking accounts
	StakeAccounts []string `protobuf:"bytes,1,rep,name=stake_accounts,json=stakeAccounts,proto3" json:"stake_accounts,omitempty"`
}

func (x *DeactivateAllStake) Reset() {
	*x = DeactivateAllStake{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Solana_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeactivateAllStake) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeactivateAllStake) ProtoMessage() {}

func (x *DeactivateAllStake) ProtoReflect() protoreflect.Message {
	mi := &file_Solana_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeactivateAllStake.ProtoReflect.Descriptor instead.
func (*DeactivateAllStake) Descriptor() ([]byte, []int) {
	return file_Solana_proto_rawDescGZIP(), []int{3}
}

func (x *DeactivateAllStake) GetStakeAccounts() []string {
	if x != nil {
		return x.StakeAccounts
	}
	return nil
}

// Withdraw amount from stake account
type WithdrawStake struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// staking account
	StakeAccount string `protobuf:"bytes,1,opt,name=stake_account,json=stakeAccount,proto3" json:"stake_account,omitempty"`
	// withdrawal amount
	Value uint64 `protobuf:"varint,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *WithdrawStake) Reset() {
	*x = WithdrawStake{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Solana_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WithdrawStake) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WithdrawStake) ProtoMessage() {}

func (x *WithdrawStake) ProtoReflect() protoreflect.Message {
	mi := &file_Solana_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WithdrawStake.ProtoReflect.Descriptor instead.
func (*WithdrawStake) Descriptor() ([]byte, []int) {
	return file_Solana_proto_rawDescGZIP(), []int{4}
}

func (x *WithdrawStake) GetStakeAccount() string {
	if x != nil {
		return x.StakeAccount
	}
	return ""
}

func (x *WithdrawStake) GetValue() uint64 {
	if x != nil {
		return x.Value
	}
	return 0
}

// Technical structure to group a staking account and an amount
type StakeAccountValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// staking account
	StakeAccount string `protobuf:"bytes,1,opt,name=stake_account,json=stakeAccount,proto3" json:"stake_account,omitempty"`
	// amount
	Value uint64 `protobuf:"varint,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *StakeAccountValue) Reset() {
	*x = StakeAccountValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Solana_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StakeAccountValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StakeAccountValue) ProtoMessage() {}

func (x *StakeAccountValue) ProtoReflect() protoreflect.Message {
	mi := &file_Solana_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StakeAccountValue.ProtoReflect.Descriptor instead.
func (*StakeAccountValue) Descriptor() ([]byte, []int) {
	return file_Solana_proto_rawDescGZIP(), []int{5}
}

func (x *StakeAccountValue) GetStakeAccount() string {
	if x != nil {
		return x.StakeAccount
	}
	return ""
}

func (x *StakeAccountValue) GetValue() uint64 {
	if x != nil {
		return x.Value
	}
	return 0
}

// Withdraw amounts from stake accounts
type WithdrawAllStake struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StakeAccounts []*StakeAccountValue `protobuf:"bytes,1,rep,name=stake_accounts,json=stakeAccounts,proto3" json:"stake_accounts,omitempty"`
}

func (x *WithdrawAllStake) Reset() {
	*x = WithdrawAllStake{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Solana_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WithdrawAllStake) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WithdrawAllStake) ProtoMessage() {}

func (x *WithdrawAllStake) ProtoReflect() protoreflect.Message {
	mi := &file_Solana_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WithdrawAllStake.ProtoReflect.Descriptor instead.
func (*WithdrawAllStake) Descriptor() ([]byte, []int) {
	return file_Solana_proto_rawDescGZIP(), []int{6}
}

func (x *WithdrawAllStake) GetStakeAccounts() []*StakeAccountValue {
	if x != nil {
		return x.StakeAccounts
	}
	return nil
}

// Create a token account under a main account for a token type
type CreateTokenAccount struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// main account -- can be same as signer, or other main account (if done on some other account's behalf)
	MainAddress string `protobuf:"bytes,1,opt,name=main_address,json=mainAddress,proto3" json:"main_address,omitempty"`
	// Token minting address
	TokenMintAddress string `protobuf:"bytes,2,opt,name=token_mint_address,json=tokenMintAddress,proto3" json:"token_mint_address,omitempty"`
	// Token address
	TokenAddress string `protobuf:"bytes,3,opt,name=token_address,json=tokenAddress,proto3" json:"token_address,omitempty"`
}

func (x *CreateTokenAccount) Reset() {
	*x = CreateTokenAccount{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Solana_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateTokenAccount) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTokenAccount) ProtoMessage() {}

func (x *CreateTokenAccount) ProtoReflect() protoreflect.Message {
	mi := &file_Solana_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTokenAccount.ProtoReflect.Descriptor instead.
func (*CreateTokenAccount) Descriptor() ([]byte, []int) {
	return file_Solana_proto_rawDescGZIP(), []int{7}
}

func (x *CreateTokenAccount) GetMainAddress() string {
	if x != nil {
		return x.MainAddress
	}
	return ""
}

func (x *CreateTokenAccount) GetTokenMintAddress() string {
	if x != nil {
		return x.TokenMintAddress
	}
	return ""
}

func (x *CreateTokenAccount) GetTokenAddress() string {
	if x != nil {
		return x.TokenAddress
	}
	return ""
}

// Transfer tokens
type TokenTransfer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Mint address of the token
	TokenMintAddress string `protobuf:"bytes,1,opt,name=token_mint_address,json=tokenMintAddress,proto3" json:"token_mint_address,omitempty"`
	// Source address
	SenderTokenAddress string `protobuf:"bytes,2,opt,name=sender_token_address,json=senderTokenAddress,proto3" json:"sender_token_address,omitempty"`
	// Destination address
	RecipientTokenAddress string `protobuf:"bytes,3,opt,name=recipient_token_address,json=recipientTokenAddress,proto3" json:"recipient_token_address,omitempty"`
	// Amount
	Amount uint64 `protobuf:"varint,4,opt,name=amount,proto3" json:"amount,omitempty"`
	// Note: 8-bit value
	Decimals uint32 `protobuf:"varint,5,opt,name=decimals,proto3" json:"decimals,omitempty"`
	// optional memo§
	Memo string `protobuf:"bytes,6,opt,name=memo,proto3" json:"memo,omitempty"`
	// optional referenced public keys
	References []string `protobuf:"bytes,7,rep,name=references,proto3" json:"references,omitempty"`
}

func (x *TokenTransfer) Reset() {
	*x = TokenTransfer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Solana_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TokenTransfer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TokenTransfer) ProtoMessage() {}

func (x *TokenTransfer) ProtoReflect() protoreflect.Message {
	mi := &file_Solana_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TokenTransfer.ProtoReflect.Descriptor instead.
func (*TokenTransfer) Descriptor() ([]byte, []int) {
	return file_Solana_proto_rawDescGZIP(), []int{8}
}

func (x *TokenTransfer) GetTokenMintAddress() string {
	if x != nil {
		return x.TokenMintAddress
	}
	return ""
}

func (x *TokenTransfer) GetSenderTokenAddress() string {
	if x != nil {
		return x.SenderTokenAddress
	}
	return ""
}

func (x *TokenTransfer) GetRecipientTokenAddress() string {
	if x != nil {
		return x.RecipientTokenAddress
	}
	return ""
}

func (x *TokenTransfer) GetAmount() uint64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *TokenTransfer) GetDecimals() uint32 {
	if x != nil {
		return x.Decimals
	}
	return 0
}

func (x *TokenTransfer) GetMemo() string {
	if x != nil {
		return x.Memo
	}
	return ""
}

func (x *TokenTransfer) GetReferences() []string {
	if x != nil {
		return x.References
	}
	return nil
}

// CreateTokenAccount and TokenTransfer combined
type CreateAndTransferToken struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// main account -- can be same as signer, or other main account (if done on some other account's behalf)
	RecipientMainAddress string `protobuf:"bytes,1,opt,name=recipient_main_address,json=recipientMainAddress,proto3" json:"recipient_main_address,omitempty"`
	// Mint address of the token
	TokenMintAddress string `protobuf:"bytes,2,opt,name=token_mint_address,json=tokenMintAddress,proto3" json:"token_mint_address,omitempty"`
	// Token address for the recipient, will be created first
	RecipientTokenAddress string `protobuf:"bytes,3,opt,name=recipient_token_address,json=recipientTokenAddress,proto3" json:"recipient_token_address,omitempty"`
	// Sender's token address
	SenderTokenAddress string `protobuf:"bytes,4,opt,name=sender_token_address,json=senderTokenAddress,proto3" json:"sender_token_address,omitempty"`
	// amount
	Amount uint64 `protobuf:"varint,5,opt,name=amount,proto3" json:"amount,omitempty"`
	// Note: 8-bit value
	Decimals uint32 `protobuf:"varint,6,opt,name=decimals,proto3" json:"decimals,omitempty"`
	// optional
	Memo string `protobuf:"bytes,7,opt,name=memo,proto3" json:"memo,omitempty"`
	// optional referenced public keys
	References []string `protobuf:"bytes,8,rep,name=references,proto3" json:"references,omitempty"`
}

func (x *CreateAndTransferToken) Reset() {
	*x = CreateAndTransferToken{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Solana_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateAndTransferToken) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateAndTransferToken) ProtoMessage() {}

func (x *CreateAndTransferToken) ProtoReflect() protoreflect.Message {
	mi := &file_Solana_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateAndTransferToken.ProtoReflect.Descriptor instead.
func (*CreateAndTransferToken) Descriptor() ([]byte, []int) {
	return file_Solana_proto_rawDescGZIP(), []int{9}
}

func (x *CreateAndTransferToken) GetRecipientMainAddress() string {
	if x != nil {
		return x.RecipientMainAddress
	}
	return ""
}

func (x *CreateAndTransferToken) GetTokenMintAddress() string {
	if x != nil {
		return x.TokenMintAddress
	}
	return ""
}

func (x *CreateAndTransferToken) GetRecipientTokenAddress() string {
	if x != nil {
		return x.RecipientTokenAddress
	}
	return ""
}

func (x *CreateAndTransferToken) GetSenderTokenAddress() string {
	if x != nil {
		return x.SenderTokenAddress
	}
	return ""
}

func (x *CreateAndTransferToken) GetAmount() uint64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *CreateAndTransferToken) GetDecimals() uint32 {
	if x != nil {
		return x.Decimals
	}
	return 0
}

func (x *CreateAndTransferToken) GetMemo() string {
	if x != nil {
		return x.Memo
	}
	return ""
}

func (x *CreateAndTransferToken) GetReferences() []string {
	if x != nil {
		return x.References
	}
	return nil
}

// Input data necessary to create a signed transaction.
type SigningInput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The secret private key used for signing (32 bytes).
	PrivateKey []byte `protobuf:"bytes,1,opt,name=private_key,json=privateKey,proto3" json:"private_key,omitempty"`
	// Relatively recent block hash
	RecentBlockhash string `protobuf:"bytes,2,opt,name=recent_blockhash,json=recentBlockhash,proto3" json:"recent_blockhash,omitempty"`
	V0Msg           bool   `protobuf:"varint,3,opt,name=v0_msg,json=v0Msg,proto3" json:"v0_msg,omitempty"`
	// Payload message
	//
	// Types that are assignable to TransactionType:
	//	*SigningInput_TransferTransaction
	//	*SigningInput_DelegateStakeTransaction
	//	*SigningInput_DeactivateStakeTransaction
	//	*SigningInput_DeactivateAllStakeTransaction
	//	*SigningInput_WithdrawTransaction
	//	*SigningInput_WithdrawAllTransaction
	//	*SigningInput_CreateTokenAccountTransaction
	//	*SigningInput_TokenTransferTransaction
	//	*SigningInput_CreateAndTransferTokenTransaction
	TransactionType isSigningInput_TransactionType `protobuf_oneof:"transaction_type"`
}

func (x *SigningInput) Reset() {
	*x = SigningInput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Solana_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SigningInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SigningInput) ProtoMessage() {}

func (x *SigningInput) ProtoReflect() protoreflect.Message {
	mi := &file_Solana_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SigningInput.ProtoReflect.Descriptor instead.
func (*SigningInput) Descriptor() ([]byte, []int) {
	return file_Solana_proto_rawDescGZIP(), []int{10}
}

func (x *SigningInput) GetPrivateKey() []byte {
	if x != nil {
		return x.PrivateKey
	}
	return nil
}

func (x *SigningInput) GetRecentBlockhash() string {
	if x != nil {
		return x.RecentBlockhash
	}
	return ""
}

func (x *SigningInput) GetV0Msg() bool {
	if x != nil {
		return x.V0Msg
	}
	return false
}

func (m *SigningInput) GetTransactionType() isSigningInput_TransactionType {
	if m != nil {
		return m.TransactionType
	}
	return nil
}

func (x *SigningInput) GetTransferTransaction() *Transfer {
	if x, ok := x.GetTransactionType().(*SigningInput_TransferTransaction); ok {
		return x.TransferTransaction
	}
	return nil
}

func (x *SigningInput) GetDelegateStakeTransaction() *DelegateStake {
	if x, ok := x.GetTransactionType().(*SigningInput_DelegateStakeTransaction); ok {
		return x.DelegateStakeTransaction
	}
	return nil
}

func (x *SigningInput) GetDeactivateStakeTransaction() *DeactivateStake {
	if x, ok := x.GetTransactionType().(*SigningInput_DeactivateStakeTransaction); ok {
		return x.DeactivateStakeTransaction
	}
	return nil
}

func (x *SigningInput) GetDeactivateAllStakeTransaction() *DeactivateAllStake {
	if x, ok := x.GetTransactionType().(*SigningInput_DeactivateAllStakeTransaction); ok {
		return x.DeactivateAllStakeTransaction
	}
	return nil
}

func (x *SigningInput) GetWithdrawTransaction() *WithdrawStake {
	if x, ok := x.GetTransactionType().(*SigningInput_WithdrawTransaction); ok {
		return x.WithdrawTransaction
	}
	return nil
}

func (x *SigningInput) GetWithdrawAllTransaction() *WithdrawAllStake {
	if x, ok := x.GetTransactionType().(*SigningInput_WithdrawAllTransaction); ok {
		return x.WithdrawAllTransaction
	}
	return nil
}

func (x *SigningInput) GetCreateTokenAccountTransaction() *CreateTokenAccount {
	if x, ok := x.GetTransactionType().(*SigningInput_CreateTokenAccountTransaction); ok {
		return x.CreateTokenAccountTransaction
	}
	return nil
}

func (x *SigningInput) GetTokenTransferTransaction() *TokenTransfer {
	if x, ok := x.GetTransactionType().(*SigningInput_TokenTransferTransaction); ok {
		return x.TokenTransferTransaction
	}
	return nil
}

func (x *SigningInput) GetCreateAndTransferTokenTransaction() *CreateAndTransferToken {
	if x, ok := x.GetTransactionType().(*SigningInput_CreateAndTransferTokenTransaction); ok {
		return x.CreateAndTransferTokenTransaction
	}
	return nil
}

type isSigningInput_TransactionType interface {
	isSigningInput_TransactionType()
}

type SigningInput_TransferTransaction struct {
	TransferTransaction *Transfer `protobuf:"bytes,4,opt,name=transfer_transaction,json=transferTransaction,proto3,oneof"`
}

type SigningInput_DelegateStakeTransaction struct {
	DelegateStakeTransaction *DelegateStake `protobuf:"bytes,5,opt,name=delegate_stake_transaction,json=delegateStakeTransaction,proto3,oneof"`
}

type SigningInput_DeactivateStakeTransaction struct {
	DeactivateStakeTransaction *DeactivateStake `protobuf:"bytes,6,opt,name=deactivate_stake_transaction,json=deactivateStakeTransaction,proto3,oneof"`
}

type SigningInput_DeactivateAllStakeTransaction struct {
	DeactivateAllStakeTransaction *DeactivateAllStake `protobuf:"bytes,7,opt,name=deactivate_all_stake_transaction,json=deactivateAllStakeTransaction,proto3,oneof"`
}

type SigningInput_WithdrawTransaction struct {
	WithdrawTransaction *WithdrawStake `protobuf:"bytes,8,opt,name=withdraw_transaction,json=withdrawTransaction,proto3,oneof"`
}

type SigningInput_WithdrawAllTransaction struct {
	WithdrawAllTransaction *WithdrawAllStake `protobuf:"bytes,9,opt,name=withdraw_all_transaction,json=withdrawAllTransaction,proto3,oneof"`
}

type SigningInput_CreateTokenAccountTransaction struct {
	CreateTokenAccountTransaction *CreateTokenAccount `protobuf:"bytes,10,opt,name=create_token_account_transaction,json=createTokenAccountTransaction,proto3,oneof"`
}

type SigningInput_TokenTransferTransaction struct {
	TokenTransferTransaction *TokenTransfer `protobuf:"bytes,11,opt,name=token_transfer_transaction,json=tokenTransferTransaction,proto3,oneof"`
}

type SigningInput_CreateAndTransferTokenTransaction struct {
	CreateAndTransferTokenTransaction *CreateAndTransferToken `protobuf:"bytes,12,opt,name=create_and_transfer_token_transaction,json=createAndTransferTokenTransaction,proto3,oneof"`
}

func (*SigningInput_TransferTransaction) isSigningInput_TransactionType() {}

func (*SigningInput_DelegateStakeTransaction) isSigningInput_TransactionType() {}

func (*SigningInput_DeactivateStakeTransaction) isSigningInput_TransactionType() {}

func (*SigningInput_DeactivateAllStakeTransaction) isSigningInput_TransactionType() {}

func (*SigningInput_WithdrawTransaction) isSigningInput_TransactionType() {}

func (*SigningInput_WithdrawAllTransaction) isSigningInput_TransactionType() {}

func (*SigningInput_CreateTokenAccountTransaction) isSigningInput_TransactionType() {}

func (*SigningInput_TokenTransferTransaction) isSigningInput_TransactionType() {}

func (*SigningInput_CreateAndTransferTokenTransaction) isSigningInput_TransactionType() {}

// Result containing the signed and encoded transaction.
type SigningOutput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The encoded transaction
	Encoded string `protobuf:"bytes,1,opt,name=encoded,proto3" json:"encoded,omitempty"`
	// The unsigned transaction
	UnsignedTx string `protobuf:"bytes,2,opt,name=unsigned_tx,json=unsignedTx,proto3" json:"unsigned_tx,omitempty"`
}

func (x *SigningOutput) Reset() {
	*x = SigningOutput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Solana_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SigningOutput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SigningOutput) ProtoMessage() {}

func (x *SigningOutput) ProtoReflect() protoreflect.Message {
	mi := &file_Solana_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SigningOutput.ProtoReflect.Descriptor instead.
func (*SigningOutput) Descriptor() ([]byte, []int) {
	return file_Solana_proto_rawDescGZIP(), []int{11}
}

func (x *SigningOutput) GetEncoded() string {
	if x != nil {
		return x.Encoded
	}
	return ""
}

func (x *SigningOutput) GetUnsignedTx() string {
	if x != nil {
		return x.UnsignedTx
	}
	return ""
}

var File_Solana_proto protoreflect.FileDescriptor

var file_Solana_proto_rawDesc = []byte{
	0x0a, 0x0c, 0x53, 0x6f, 0x6c, 0x61, 0x6e, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0f,
	0x54, 0x57, 0x2e, 0x53, 0x6f, 0x6c, 0x61, 0x6e, 0x61, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0x72, 0x0a, 0x08, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x72,
	0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x72, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x6d, 0x65, 0x6d, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6d,
	0x65, 0x6d, 0x6f, 0x12, 0x1e, 0x0a, 0x0a, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x73, 0x22, 0x75, 0x0a, 0x0d, 0x44, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x65, 0x53,
	0x74, 0x61, 0x6b, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f,
	0x72, 0x5f, 0x70, 0x75, 0x62, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f,
	0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x50, 0x75, 0x62, 0x6b, 0x65, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x5f, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x74,
	0x61, 0x6b, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x36, 0x0a, 0x0f, 0x44, 0x65,
	0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x12, 0x23, 0x0a,
	0x0d, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x22, 0x3b, 0x0a, 0x12, 0x44, 0x65, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65,
	0x41, 0x6c, 0x6c, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x74, 0x61, 0x6b,
	0x65, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x0d, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x22,
	0x4a, 0x0a, 0x0d, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x53, 0x74, 0x61, 0x6b, 0x65,
	0x12, 0x23, 0x0a, 0x0d, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x4e, 0x0a, 0x11, 0x53,
	0x74, 0x61, 0x6b, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x12, 0x23, 0x0a, 0x0d, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x5d, 0x0a, 0x10, 0x57,
	0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x41, 0x6c, 0x6c, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x12,
	0x49, 0x0a, 0x0e, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x54, 0x57, 0x2e, 0x53, 0x6f, 0x6c,
	0x61, 0x6e, 0x61, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0d, 0x73, 0x74, 0x61,
	0x6b, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x22, 0x8a, 0x01, 0x0a, 0x12, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x21, 0x0a, 0x0c, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6d, 0x61, 0x69, 0x6e, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x12, 0x2c, 0x0a, 0x12, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x6d, 0x69,
	0x6e, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x10, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x4d, 0x69, 0x6e, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0x8f, 0x02, 0x0a, 0x0d, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x12, 0x2c, 0x0a, 0x12, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x5f, 0x6d, 0x69, 0x6e, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x4d, 0x69, 0x6e, 0x74,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x30, 0x0a, 0x14, 0x73, 0x65, 0x6e, 0x64, 0x65,
	0x72, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x36, 0x0a, 0x17, 0x72, 0x65, 0x63,
	0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x72, 0x65, 0x63, 0x69,
	0x70, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x65, 0x63,
	0x69, 0x6d, 0x61, 0x6c, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x64, 0x65, 0x63,
	0x69, 0x6d, 0x61, 0x6c, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x65, 0x6d, 0x6f, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6d, 0x65, 0x6d, 0x6f, 0x12, 0x1e, 0x0a, 0x0a, 0x72, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x72,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x22, 0xce, 0x02, 0x0a, 0x16, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x41, 0x6e, 0x64, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x34, 0x0a, 0x16, 0x72, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e,
	0x74, 0x5f, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x72, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x4d,
	0x61, 0x69, 0x6e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x2c, 0x0a, 0x12, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x5f, 0x6d, 0x69, 0x6e, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x4d, 0x69, 0x6e,
	0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x36, 0x0a, 0x17, 0x72, 0x65, 0x63, 0x69,
	0x70, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x72, 0x65, 0x63, 0x69, 0x70,
	0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x12, 0x30, 0x0a, 0x14, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12,
	0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x65,
	0x63, 0x69, 0x6d, 0x61, 0x6c, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x64, 0x65,
	0x63, 0x69, 0x6d, 0x61, 0x6c, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x65, 0x6d, 0x6f, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6d, 0x65, 0x6d, 0x6f, 0x12, 0x1e, 0x0a, 0x0a, 0x72, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a,
	0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x22, 0x8c, 0x08, 0x0a, 0x0c, 0x53,
	0x69, 0x67, 0x6e, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x70,
	0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x0a, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x12, 0x29, 0x0a, 0x10,
	0x72, 0x65, 0x63, 0x65, 0x6e, 0x74, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x68, 0x61, 0x73, 0x68,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x72, 0x65, 0x63, 0x65, 0x6e, 0x74, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x68, 0x61, 0x73, 0x68, 0x12, 0x15, 0x0a, 0x06, 0x76, 0x30, 0x5f, 0x6d, 0x73,
	0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x76, 0x30, 0x4d, 0x73, 0x67, 0x12, 0x4e,
	0x0a, 0x14, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x54,
	0x57, 0x2e, 0x53, 0x6f, 0x6c, 0x61, 0x6e, 0x61, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x48, 0x00, 0x52, 0x13, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x66, 0x65, 0x72, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x5e,
	0x0a, 0x1a, 0x64, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x6b, 0x65,
	0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x54, 0x57, 0x2e, 0x53, 0x6f, 0x6c, 0x61, 0x6e, 0x61, 0x2e, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x65, 0x53, 0x74, 0x61,
	0x6b, 0x65, 0x48, 0x00, 0x52, 0x18, 0x64, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x65, 0x53, 0x74,
	0x61, 0x6b, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x64,
	0x0a, 0x1c, 0x64, 0x65, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x5f, 0x73, 0x74, 0x61,
	0x6b, 0x65, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x54, 0x57, 0x2e, 0x53, 0x6f, 0x6c, 0x61, 0x6e, 0x61,
	0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x65, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74,
	0x65, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x48, 0x00, 0x52, 0x1a, 0x64, 0x65, 0x61, 0x63, 0x74, 0x69,
	0x76, 0x61, 0x74, 0x65, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x6e, 0x0a, 0x20, 0x64, 0x65, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61,
	0x74, 0x65, 0x5f, 0x61, 0x6c, 0x6c, 0x5f, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x5f, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23,
	0x2e, 0x54, 0x57, 0x2e, 0x53, 0x6f, 0x6c, 0x61, 0x6e, 0x61, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x44, 0x65, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x41, 0x6c, 0x6c, 0x53, 0x74,
	0x61, 0x6b, 0x65, 0x48, 0x00, 0x52, 0x1d, 0x64, 0x65, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74,
	0x65, 0x41, 0x6c, 0x6c, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x53, 0x0a, 0x14, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77,
	0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x54, 0x57, 0x2e, 0x53, 0x6f, 0x6c, 0x61, 0x6e, 0x61, 0x2e, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x53, 0x74, 0x61,
	0x6b, 0x65, 0x48, 0x00, 0x52, 0x13, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x5d, 0x0a, 0x18, 0x77, 0x69, 0x74,
	0x68, 0x64, 0x72, 0x61, 0x77, 0x5f, 0x61, 0x6c, 0x6c, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x54, 0x57,
	0x2e, 0x53, 0x6f, 0x6c, 0x61, 0x6e, 0x61, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x57, 0x69,
	0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x41, 0x6c, 0x6c, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x48, 0x00,
	0x52, 0x16, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x41, 0x6c, 0x6c, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x6e, 0x0a, 0x20, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x23, 0x2e, 0x54, 0x57, 0x2e, 0x53, 0x6f, 0x6c, 0x61, 0x6e, 0x61, 0x2e, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x1d, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x5e, 0x0a, 0x1a, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x54,
	0x57, 0x2e, 0x53, 0x6f, 0x6c, 0x61, 0x6e, 0x61, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x48, 0x00, 0x52, 0x18,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x7b, 0x0a, 0x25, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x5f, 0x61, 0x6e, 0x64, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x5f,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x54, 0x57, 0x2e, 0x53, 0x6f, 0x6c,
	0x61, 0x6e, 0x61, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x41, 0x6e, 0x64, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x48, 0x00, 0x52, 0x21, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x6e, 0x64, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x66, 0x65, 0x72, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x12, 0x0a, 0x10, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x22, 0x4a, 0x0a, 0x0d, 0x53, 0x69, 0x67,
	0x6e, 0x69, 0x6e, 0x67, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e,
	0x63, 0x6f, 0x64, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x6e, 0x63,
	0x6f, 0x64, 0x65, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x75, 0x6e, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64,
	0x5f, 0x74, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x75, 0x6e, 0x73, 0x69, 0x67,
	0x6e, 0x65, 0x64, 0x54, 0x78, 0x42, 0x17, 0x0a, 0x15, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x6a, 0x6e, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_Solana_proto_rawDescOnce sync.Once
	file_Solana_proto_rawDescData = file_Solana_proto_rawDesc
)

func file_Solana_proto_rawDescGZIP() []byte {
	file_Solana_proto_rawDescOnce.Do(func() {
		file_Solana_proto_rawDescData = protoimpl.X.CompressGZIP(file_Solana_proto_rawDescData)
	})
	return file_Solana_proto_rawDescData
}

var file_Solana_proto_msgTypes = make([]protoimpl.MessageInfo, 12)
var file_Solana_proto_goTypes = []interface{}{
	(*Transfer)(nil),               // 0: TW.Solana.Proto.Transfer
	(*DelegateStake)(nil),          // 1: TW.Solana.Proto.DelegateStake
	(*DeactivateStake)(nil),        // 2: TW.Solana.Proto.DeactivateStake
	(*DeactivateAllStake)(nil),     // 3: TW.Solana.Proto.DeactivateAllStake
	(*WithdrawStake)(nil),          // 4: TW.Solana.Proto.WithdrawStake
	(*StakeAccountValue)(nil),      // 5: TW.Solana.Proto.StakeAccountValue
	(*WithdrawAllStake)(nil),       // 6: TW.Solana.Proto.WithdrawAllStake
	(*CreateTokenAccount)(nil),     // 7: TW.Solana.Proto.CreateTokenAccount
	(*TokenTransfer)(nil),          // 8: TW.Solana.Proto.TokenTransfer
	(*CreateAndTransferToken)(nil), // 9: TW.Solana.Proto.CreateAndTransferToken
	(*SigningInput)(nil),           // 10: TW.Solana.Proto.SigningInput
	(*SigningOutput)(nil),          // 11: TW.Solana.Proto.SigningOutput
}
var file_Solana_proto_depIdxs = []int32{
	5,  // 0: TW.Solana.Proto.WithdrawAllStake.stake_accounts:type_name -> TW.Solana.Proto.StakeAccountValue
	0,  // 1: TW.Solana.Proto.SigningInput.transfer_transaction:type_name -> TW.Solana.Proto.Transfer
	1,  // 2: TW.Solana.Proto.SigningInput.delegate_stake_transaction:type_name -> TW.Solana.Proto.DelegateStake
	2,  // 3: TW.Solana.Proto.SigningInput.deactivate_stake_transaction:type_name -> TW.Solana.Proto.DeactivateStake
	3,  // 4: TW.Solana.Proto.SigningInput.deactivate_all_stake_transaction:type_name -> TW.Solana.Proto.DeactivateAllStake
	4,  // 5: TW.Solana.Proto.SigningInput.withdraw_transaction:type_name -> TW.Solana.Proto.WithdrawStake
	6,  // 6: TW.Solana.Proto.SigningInput.withdraw_all_transaction:type_name -> TW.Solana.Proto.WithdrawAllStake
	7,  // 7: TW.Solana.Proto.SigningInput.create_token_account_transaction:type_name -> TW.Solana.Proto.CreateTokenAccount
	8,  // 8: TW.Solana.Proto.SigningInput.token_transfer_transaction:type_name -> TW.Solana.Proto.TokenTransfer
	9,  // 9: TW.Solana.Proto.SigningInput.create_and_transfer_token_transaction:type_name -> TW.Solana.Proto.CreateAndTransferToken
	10, // [10:10] is the sub-list for method output_type
	10, // [10:10] is the sub-list for method input_type
	10, // [10:10] is the sub-list for extension type_name
	10, // [10:10] is the sub-list for extension extendee
	0,  // [0:10] is the sub-list for field type_name
}

func init() { file_Solana_proto_init() }
func file_Solana_proto_init() {
	if File_Solana_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_Solana_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Transfer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Solana_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DelegateStake); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Solana_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeactivateStake); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Solana_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeactivateAllStake); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Solana_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WithdrawStake); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Solana_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StakeAccountValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Solana_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WithdrawAllStake); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Solana_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateTokenAccount); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Solana_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TokenTransfer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Solana_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateAndTransferToken); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Solana_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SigningInput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Solana_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SigningOutput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_Solana_proto_msgTypes[10].OneofWrappers = []interface{}{
		(*SigningInput_TransferTransaction)(nil),
		(*SigningInput_DelegateStakeTransaction)(nil),
		(*SigningInput_DeactivateStakeTransaction)(nil),
		(*SigningInput_DeactivateAllStakeTransaction)(nil),
		(*SigningInput_WithdrawTransaction)(nil),
		(*SigningInput_WithdrawAllTransaction)(nil),
		(*SigningInput_CreateTokenAccountTransaction)(nil),
		(*SigningInput_TokenTransferTransaction)(nil),
		(*SigningInput_CreateAndTransferTokenTransaction)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_Solana_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   12,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_Solana_proto_goTypes,
		DependencyIndexes: file_Solana_proto_depIdxs,
		MessageInfos:      file_Solana_proto_msgTypes,
	}.Build()
	File_Solana_proto = out.File
	file_Solana_proto_rawDesc = nil
	file_Solana_proto_goTypes = nil
	file_Solana_proto_depIdxs = nil
}
