// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/wallet/WalletSrv.proto

package WalletSrv

import (
	fmt "fmt"
	proto "google.golang.org/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "go-micro.dev/v4/api"
	client "go-micro.dev/v4/client"
	server "go-micro.dev/v4/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for WalletSrv service

func NewWalletSrvEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for WalletSrv service

type WalletSrvService interface {
	CreateNewInternalWallet(ctx context.Context, in *CreateNewInternalWalletRequest, opts ...client.CallOption) (*CreateNewInternalWalletResponse, error)
	AddExternalWallet(ctx context.Context, in *AddExternalWalletRequest, opts ...client.CallOption) (*AddExternalWalletResponse, error)
	InternalVoteOnProposal(ctx context.Context, in *InternalVoteOnProposalRequest, opts ...client.CallOption) (*InternalVoteOnProposalResponse, error)
	ExternalVoteOnProposal(ctx context.Context, in *ExternalVoteOnProposalRequest, opts ...client.CallOption) (*ExternalVoteOnProposalResponse, error)
	// one active reciept for each user at the time
	// implement in last steps
	Transfer(ctx context.Context, in *TransferRequest, opts ...client.CallOption) (*TransferResponse, error)
	CreateRecieptQrcode(ctx context.Context, in *CreateRecieptQrcodeRequest, opts ...client.CallOption) (*CreateRecieptQrcodeResponse, error)
}

type walletSrvService struct {
	c    client.Client
	name string
}

func NewWalletSrvService(name string, c client.Client) WalletSrvService {
	return &walletSrvService{
		c:    c,
		name: name,
	}
}

func (c *walletSrvService) CreateNewInternalWallet(ctx context.Context, in *CreateNewInternalWalletRequest, opts ...client.CallOption) (*CreateNewInternalWalletResponse, error) {
	req := c.c.NewRequest(c.name, "WalletSrv.CreateNewInternalWallet", in)
	out := new(CreateNewInternalWalletResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletSrvService) AddExternalWallet(ctx context.Context, in *AddExternalWalletRequest, opts ...client.CallOption) (*AddExternalWalletResponse, error) {
	req := c.c.NewRequest(c.name, "WalletSrv.AddExternalWallet", in)
	out := new(AddExternalWalletResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletSrvService) InternalVoteOnProposal(ctx context.Context, in *InternalVoteOnProposalRequest, opts ...client.CallOption) (*InternalVoteOnProposalResponse, error) {
	req := c.c.NewRequest(c.name, "WalletSrv.InternalVoteOnProposal", in)
	out := new(InternalVoteOnProposalResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletSrvService) ExternalVoteOnProposal(ctx context.Context, in *ExternalVoteOnProposalRequest, opts ...client.CallOption) (*ExternalVoteOnProposalResponse, error) {
	req := c.c.NewRequest(c.name, "WalletSrv.ExternalVoteOnProposal", in)
	out := new(ExternalVoteOnProposalResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletSrvService) Transfer(ctx context.Context, in *TransferRequest, opts ...client.CallOption) (*TransferResponse, error) {
	req := c.c.NewRequest(c.name, "WalletSrv.Transfer", in)
	out := new(TransferResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletSrvService) CreateRecieptQrcode(ctx context.Context, in *CreateRecieptQrcodeRequest, opts ...client.CallOption) (*CreateRecieptQrcodeResponse, error) {
	req := c.c.NewRequest(c.name, "WalletSrv.CreateRecieptQrcode", in)
	out := new(CreateRecieptQrcodeResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for WalletSrv service

type WalletSrvHandler interface {
	CreateNewInternalWallet(context.Context, *CreateNewInternalWalletRequest, *CreateNewInternalWalletResponse) error
	AddExternalWallet(context.Context, *AddExternalWalletRequest, *AddExternalWalletResponse) error
	InternalVoteOnProposal(context.Context, *InternalVoteOnProposalRequest, *InternalVoteOnProposalResponse) error
	ExternalVoteOnProposal(context.Context, *ExternalVoteOnProposalRequest, *ExternalVoteOnProposalResponse) error
	// one active reciept for each user at the time
	// implement in last steps
	Transfer(context.Context, *TransferRequest, *TransferResponse) error
	CreateRecieptQrcode(context.Context, *CreateRecieptQrcodeRequest, *CreateRecieptQrcodeResponse) error
}

func RegisterWalletSrvHandler(s server.Server, hdlr WalletSrvHandler, opts ...server.HandlerOption) error {
	type walletSrv interface {
		CreateNewInternalWallet(ctx context.Context, in *CreateNewInternalWalletRequest, out *CreateNewInternalWalletResponse) error
		AddExternalWallet(ctx context.Context, in *AddExternalWalletRequest, out *AddExternalWalletResponse) error
		InternalVoteOnProposal(ctx context.Context, in *InternalVoteOnProposalRequest, out *InternalVoteOnProposalResponse) error
		ExternalVoteOnProposal(ctx context.Context, in *ExternalVoteOnProposalRequest, out *ExternalVoteOnProposalResponse) error
		Transfer(ctx context.Context, in *TransferRequest, out *TransferResponse) error
		CreateRecieptQrcode(ctx context.Context, in *CreateRecieptQrcodeRequest, out *CreateRecieptQrcodeResponse) error
	}
	type WalletSrv struct {
		walletSrv
	}
	h := &walletSrvHandler{hdlr}
	return s.Handle(s.NewHandler(&WalletSrv{h}, opts...))
}

type walletSrvHandler struct {
	WalletSrvHandler
}

func (h *walletSrvHandler) CreateNewInternalWallet(ctx context.Context, in *CreateNewInternalWalletRequest, out *CreateNewInternalWalletResponse) error {
	return h.WalletSrvHandler.CreateNewInternalWallet(ctx, in, out)
}

func (h *walletSrvHandler) AddExternalWallet(ctx context.Context, in *AddExternalWalletRequest, out *AddExternalWalletResponse) error {
	return h.WalletSrvHandler.AddExternalWallet(ctx, in, out)
}

func (h *walletSrvHandler) InternalVoteOnProposal(ctx context.Context, in *InternalVoteOnProposalRequest, out *InternalVoteOnProposalResponse) error {
	return h.WalletSrvHandler.InternalVoteOnProposal(ctx, in, out)
}

func (h *walletSrvHandler) ExternalVoteOnProposal(ctx context.Context, in *ExternalVoteOnProposalRequest, out *ExternalVoteOnProposalResponse) error {
	return h.WalletSrvHandler.ExternalVoteOnProposal(ctx, in, out)
}

func (h *walletSrvHandler) Transfer(ctx context.Context, in *TransferRequest, out *TransferResponse) error {
	return h.WalletSrvHandler.Transfer(ctx, in, out)
}

func (h *walletSrvHandler) CreateRecieptQrcode(ctx context.Context, in *CreateRecieptQrcodeRequest, out *CreateRecieptQrcodeResponse) error {
	return h.WalletSrvHandler.CreateRecieptQrcode(ctx, in, out)
}
