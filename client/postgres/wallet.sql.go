// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: wallet.sql

package postgres

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const createInternalWallet = `-- name: CreateInternalWallet :exec
INSERT INTO internal_wallet(
  wallet_id, 
  derivation_version,
  index
)
VALUES ($1, $2,$3)
`

type CreateInternalWalletParams struct {
	WalletID          uuid.UUID `db:"wallet_id" json:"wallet_id"`
	DerivationVersion string    `db:"derivation_version" json:"derivation_version"`
	Index             int64     `db:"index" json:"index"`
}

func (q *Queries) CreateInternalWallet(ctx context.Context, arg CreateInternalWalletParams) error {
	_, err := q.db.Exec(ctx, createInternalWallet, arg.WalletID, arg.DerivationVersion, arg.Index)
	return err
}

const createWallet = `-- name: CreateWallet :exec
INSERT INTO wallet (
  id,
  user_id,
  address,
  network, 
  asset
) VALUES (
    $1,$2,$3,$4,$5
)
`

type CreateWalletParams struct {
	ID      uuid.UUID `db:"id" json:"id"`
	UserID  string    `db:"user_id" json:"user_id"`
	Address string    `db:"address" json:"address"`
	Network string    `db:"network" json:"network"`
	Asset   string    `db:"asset" json:"asset"`
}

func (q *Queries) CreateWallet(ctx context.Context, arg CreateWalletParams) error {
	_, err := q.db.Exec(ctx, createWallet,
		arg.ID,
		arg.UserID,
		arg.Address,
		arg.Network,
		arg.Asset,
	)
	return err
}

const getAllWallet = `-- name: GetAllWallet :many
SELECT id, user_id, address, network, asset, created_at, updated_at FROM wallet 
WHERE user_id = $1
ORDER BY created_at DESC
LIMIT $2 OFFSET $3
`

type GetAllWalletParams struct {
	UserID string `db:"user_id" json:"user_id"`
	Limit  int32  `db:"limit" json:"limit"`
	Offset int32  `db:"offset" json:"offset"`
}

func (q *Queries) GetAllWallet(ctx context.Context, arg GetAllWalletParams) ([]Wallet, error) {
	rows, err := q.db.Query(ctx, getAllWallet, arg.UserID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Wallet{}
	for rows.Next() {
		var i Wallet
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Address,
			&i.Network,
			&i.Asset,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getWallet = `-- name: GetWallet :one
SELECT id, user_id, address, network, asset, created_at, updated_at, wallet_id, derivation_version, index 
FROM wallet AS w
RIGHT JOIN internal_wallet AS i ON i.wallet_id = w.id
WHERE w.user_id = $1 AND w.network = $2 AND w.asset = $3
`

type GetWalletParams struct {
	UserID  string `db:"user_id" json:"user_id"`
	Network string `db:"network" json:"network"`
	Asset   string `db:"asset" json:"asset"`
}

type GetWalletRow struct {
	ID                uuid.NullUUID  `db:"id" json:"id"`
	UserID            sql.NullString `db:"user_id" json:"user_id"`
	Address           sql.NullString `db:"address" json:"address"`
	Network           sql.NullString `db:"network" json:"network"`
	Asset             sql.NullString `db:"asset" json:"asset"`
	CreatedAt         sql.NullTime   `db:"created_at" json:"created_at"`
	UpdatedAt         sql.NullTime   `db:"updated_at" json:"updated_at"`
	WalletID          uuid.UUID      `db:"wallet_id" json:"wallet_id"`
	DerivationVersion string         `db:"derivation_version" json:"derivation_version"`
	Index             int64          `db:"index" json:"index"`
}

func (q *Queries) GetWallet(ctx context.Context, arg GetWalletParams) (GetWalletRow, error) {
	row := q.db.QueryRow(ctx, getWallet, arg.UserID, arg.Network, arg.Asset)
	var i GetWalletRow
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Address,
		&i.Network,
		&i.Asset,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.WalletID,
		&i.DerivationVersion,
		&i.Index,
	)
	return i, err
}
